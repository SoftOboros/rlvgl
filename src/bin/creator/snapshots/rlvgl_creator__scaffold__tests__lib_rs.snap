---
source: src/bin/creator/scaffold.rs
expression: "read(\"src/lib.rs\")"
---
#![no_std]
#![deny(missing_docs)]
//! Assets crate generated by rlvgl-creator.

#[cfg(feature = "vendor")]
extern crate std;

#[cfg(feature = "embed")]
/// Embedded asset bytes.
pub mod embed {
    use phf::{phf_map, Map};

    

    static INDEX: Map<&'static str, &'static [u8]> = phf_map! {
    
    };

    /// Fetch an embedded asset by its relative path.
    pub fn get(path: &str) -> Option<&'static [u8]> {
        INDEX.get(path).copied()
    }
}

#[cfg(feature = "vendor")]
/// Vendor build helpers.
pub mod vendor {
    use std::path::Path;

    /// Copy all assets into `out_dir`.
    pub fn copy_all(out_dir: &Path) -> std::io::Result<()> {
        vendor_api::copy_all(out_dir, ASSETS)
    }

    /// Generate an `rlvgl_assets.rs` module under `out_dir`.
    pub fn generate_rust_module(out_dir: &Path) -> std::io::Result<()> {
        vendor_api::generate_rust_module(out_dir, ASSETS)
    }

    const ASSETS: &[(&str, &str)] = &[
    
    ];

    mod vendor_api {
        use std::{fs, path::Path, string::String, format};

        pub fn copy_all(out_dir: &Path, assets: &[(&str, &str)]) -> std::io::Result<()> {
            let root = Path::new(env!("CARGO_MANIFEST_DIR")).join("../");
            for (_, path) in assets {
                let src = root.join(path);
                let dest = out_dir.join(path);
                if let Some(parent) = dest.parent() {
                    fs::create_dir_all(parent)?;
                }
                fs::copy(&src, &dest)?;
            }
            Ok(())
        }

        pub fn generate_rust_module(out_dir: &Path, assets: &[(&str, &str)]) -> std::io::Result<()> {
            let mut module = String::from("//! Auto-generated asset constants\n\n");
            for (name, path) in assets {
                module.push_str(&format!("pub const {}: &[u8] = include_bytes!(\"{}\");\n", name, path));
            }
            fs::write(out_dir.join("rlvgl_assets.rs"), module)?;
            Ok(())
        }
    }
}
