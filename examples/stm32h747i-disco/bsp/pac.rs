
/* Auto-generated by rlvgl-creator
 * SPDX-FileCopyrightText: 2020 STMicroelectronics
 * SPDX-FileCopyrightText: 2025 Softoboros Technology, Inc.
 * SPDX-License-Identifier: BSD-3-Clause
 * Provenance: STM32_open_pin_data (commit <hash>), build <build-hash>.
 */
#![allow(non_snake_case)]
#![allow(clippy::too_many_arguments)]


use stm32h7::stm32h747 as pac;







pub fn enable_gpio_clocks(dp: &pac::Peripherals) {
    
    
    
    dp.RCC.ahb4enr
.modify(|r, w| unsafe {
        let mut bits = r.bits();
        bits |= (1 << 
0) | (1 << 
1) | (1 << 
2) | (1 << 
3) | (1 << 
4) | (1 << 
5) | (1 << 
6) | (1 << 
7) | (1 << 
8) | (1 << 
9) | (1 << 
10);
        w.bits(bits)
    });
    
}

pub fn configure_pins_pac(dp: &pac::Peripherals) {

    

}

pub fn enable_peripherals(dp: &pac::Peripherals) {


}


pub fn deinit_board_pac(dp: &pac::Peripherals) {
    // Return pins to analog and remove pulls/open-drain
    let shift = 1 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 2 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 5 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 7 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 5 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 0 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 2 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 8 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 7 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 3 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 11 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 6 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 10 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 15 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 2 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });

    // Gate peripheral clocks

    // Disable DMA controllers and mask their interrupts

    // Disable interrupts
    unsafe { pac::NVIC::mask(pac::Interrupt::[); }
    unsafe { pac::NVIC::mask(pac::Interrupt::"); }
    unsafe { pac::NVIC::mask(pac::Interrupt::I); }
    unsafe { pac::NVIC::mask(pac::Interrupt::2); }
    unsafe { pac::NVIC::mask(pac::Interrupt::C); }
    unsafe { pac::NVIC::mask(pac::Interrupt::4); }
    unsafe { pac::NVIC::mask(pac::Interrupt::_); }
    unsafe { pac::NVIC::mask(pac::Interrupt::E); }
    unsafe { pac::NVIC::mask(pac::Interrupt::V); }
    unsafe { pac::NVIC::mask(pac::Interrupt::"); }
    unsafe { pac::NVIC::mask(pac::Interrupt::,); }
    unsafe { pac::NVIC::mask(pac::Interrupt:: ); }
    unsafe { pac::NVIC::mask(pac::Interrupt::"); }
    unsafe { pac::NVIC::mask(pac::Interrupt::I); }
    unsafe { pac::NVIC::mask(pac::Interrupt::2); }
    unsafe { pac::NVIC::mask(pac::Interrupt::C); }
    unsafe { pac::NVIC::mask(pac::Interrupt::4); }
    unsafe { pac::NVIC::mask(pac::Interrupt::_); }
    unsafe { pac::NVIC::mask(pac::Interrupt::E); }
    unsafe { pac::NVIC::mask(pac::Interrupt::R); }
    unsafe { pac::NVIC::mask(pac::Interrupt::"); }
    unsafe { pac::NVIC::mask(pac::Interrupt::]); }
    unsafe { pac::NVIC::mask(pac::Interrupt::[); }
    unsafe { pac::NVIC::mask(pac::Interrupt::"); }
    unsafe { pac::NVIC::mask(pac::Interrupt::S); }
    unsafe { pac::NVIC::mask(pac::Interrupt::P); }
    unsafe { pac::NVIC::mask(pac::Interrupt::I); }
    unsafe { pac::NVIC::mask(pac::Interrupt::2); }
    unsafe { pac::NVIC::mask(pac::Interrupt::"); }
    unsafe { pac::NVIC::mask(pac::Interrupt::]); }
    unsafe { pac::NVIC::mask(pac::Interrupt::[); }
    unsafe { pac::NVIC::mask(pac::Interrupt::"); }
    unsafe { pac::NVIC::mask(pac::Interrupt::S); }
    unsafe { pac::NVIC::mask(pac::Interrupt::P); }
    unsafe { pac::NVIC::mask(pac::Interrupt::I); }
    unsafe { pac::NVIC::mask(pac::Interrupt::5); }
    unsafe { pac::NVIC::mask(pac::Interrupt::"); }
    unsafe { pac::NVIC::mask(pac::Interrupt::]); }
    unsafe { pac::NVIC::mask(pac::Interrupt::[); }
    unsafe { pac::NVIC::mask(pac::Interrupt::"); }
    unsafe { pac::NVIC::mask(pac::Interrupt::U); }
    unsafe { pac::NVIC::mask(pac::Interrupt::A); }
    unsafe { pac::NVIC::mask(pac::Interrupt::R); }
    unsafe { pac::NVIC::mask(pac::Interrupt::T); }
    unsafe { pac::NVIC::mask(pac::Interrupt::8); }
    unsafe { pac::NVIC::mask(pac::Interrupt::"); }
    unsafe { pac::NVIC::mask(pac::Interrupt::]); }
    unsafe { pac::NVIC::mask(pac::Interrupt::[); }
    unsafe { pac::NVIC::mask(pac::Interrupt::"); }
    unsafe { pac::NVIC::mask(pac::Interrupt::U); }
    unsafe { pac::NVIC::mask(pac::Interrupt::S); }
    unsafe { pac::NVIC::mask(pac::Interrupt::A); }
    unsafe { pac::NVIC::mask(pac::Interrupt::R); }
    unsafe { pac::NVIC::mask(pac::Interrupt::T); }
    unsafe { pac::NVIC::mask(pac::Interrupt::1); }
    unsafe { pac::NVIC::mask(pac::Interrupt::"); }
    unsafe { pac::NVIC::mask(pac::Interrupt::]); }
}


pub fn init_board_pac(dp: pac::Peripherals) {
    enable_gpio_clocks(&dp);
    configure_pins_pac(&dp);
    enable_peripherals(&dp);
}