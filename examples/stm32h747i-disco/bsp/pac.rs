
/* Auto-generated by rlvgl-creator
 * SPDX-FileCopyrightText: 2020 STMicroelectronics
 * SPDX-FileCopyrightText: 2025 Softoboros Technology, Inc.
 * SPDX-License-Identifier: BSD-3-Clause
 * Provenance: STM32_open_pin_data (commit <hash>), build <build-hash>.

 */

//! PAC BSP for the generated board.

#![allow(non_snake_case)]
#![allow(clippy::too_many_arguments)]



/// Clock initialization ownership: cm7
#[doc(hidden)]
pub const CLOCKS_INIT_BY: &str = "cm7";


/// Secondary core helper: wait for system clocks initialized by the primary core.
pub fn wait_for_clocks() {
    // TODO: Implement HSEM/EXTI or shared-flag wait as needed.
}






    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    





    
        
            
                
            
        
    

    
        
            
            
        
    

    
        
            
            
        
    

    
        
            
            
        
    

    
        
            
                
            
        
    

    

    

    




    
    

use stm32h7::stm32h747 as pac;





/// Enables GPIO clocks required by the generated board.

pub fn enable_gpio_clocks(dp: &pac::Peripherals) {
    
    
    const MASK: u32 = (1u32 << 
0) |(1u32 << 
1) |(1u32 << 
2) |(1u32 << 
3) |(1u32 << 
4) |(1u32 << 
5) |(1u32 << 
6) |(1u32 << 
7) |(1u32 << 
8) |(1u32 << 
9) |(1u32 << 
10);
    dp.RCC.ahb4enr
.modify(|r, w| unsafe { w.bits(r.bits() | MASK) });
    
    
}



/// Configures pins using PAC registers.

pub fn configure_pins_pac(dp: &pac::Peripherals) {


    // GPIOA
    dp.GPIOA.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOA.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 0);bits &= !(1 << 1);bits &= !(1 << 10);bits &= !(1 << 11);bits &= !(1 << 12);bits &= !(1 << 1);bits &= !(1 << 2);bits &= !(1 << 3);bits &= !(1 << 5);bits &= !(1 << 7);bits &= !(1 << 8);bits &= !(1 << 9);w.bits(bits)
    });
    dp.GPIOA.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);let shift = 1 * 2;
        bits &= !(0b11 << shift);let shift = 10 * 2;
        bits &= !(0b11 << shift);let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);let shift = 2 * 2;
        bits &= !(0b11 << shift);let shift = 3 * 2;
        bits &= !(0b11 << shift);let shift = 5 * 2;
        bits &= !(0b11 << shift);let shift = 7 * 2;
        bits &= !(0b11 << shift);let shift = 8 * 2;
        bits &= !(0b11 << shift);let shift = 9 * 2;
        bits &= !(0b11 << shift);w.bits(bits)
    });
    dp.GPIOA.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOA.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (0 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (10 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (11 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (12 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (3 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (5 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (7 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (8 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (9 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;w.bits(bits)
    });

    // GPIOB
    dp.GPIOB.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOB.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 0);bits &= !(1 << 1);bits &= !(1 << 10);bits &= !(1 << 11);bits &= !(1 << 12);bits &= !(1 << 13);bits &= !(1 << 14);bits &= !(1 << 15);bits &= !(1 << 2);bits &= !(1 << 5);bits &= !(1 << 6);w.bits(bits)
    });
    dp.GPIOB.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);let shift = 1 * 2;
        bits &= !(0b11 << shift);let shift = 10 * 2;
        bits &= !(0b11 << shift);let shift = 11 * 2;
        bits &= !(0b11 << shift);let shift = 12 * 2;
        bits &= !(0b11 << shift);let shift = 13 * 2;
        bits &= !(0b11 << shift);let shift = 14 * 2;
        bits &= !(0b11 << shift);let shift = 15 * 2;
        bits &= !(0b11 << shift);let shift = 2 * 2;
        bits &= !(0b11 << shift);let shift = 5 * 2;
        bits &= !(0b11 << shift);let shift = 6 * 2;
        bits &= !(0b11 << shift);w.bits(bits)
    });
    dp.GPIOB.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOB.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (0 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (10 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (11 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (12 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (13 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (14 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (15 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (5 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (6 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;w.bits(bits)
    });

    // GPIOC
    dp.GPIOC.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOC.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 0);bits &= !(1 << 1);bits &= !(1 << 10);bits &= !(1 << 11);bits &= !(1 << 12);bits &= !(1 << 13);bits &= !(1 << 2);bits &= !(1 << 2);bits &= !(1 << 3);bits &= !(1 << 3);bits &= !(1 << 4);bits &= !(1 << 5);bits &= !(1 << 8);bits &= !(1 << 9);w.bits(bits)
    });
    dp.GPIOC.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);let shift = 1 * 2;
        bits &= !(0b11 << shift);let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);let shift = 4 * 2;
        bits &= !(0b11 << shift);let shift = 5 * 2;
        bits &= !(0b11 << shift);let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;w.bits(bits)
    });
    dp.GPIOC.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOC.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (0 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (10 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (11 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (12 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (13 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (3 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (3 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (4 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (5 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (8 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (9 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;w.bits(bits)
    });

    // GPIOD
    dp.GPIOD.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b01 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b01 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOD.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 0);bits &= !(1 << 1);bits &= !(1 << 10);bits &= !(1 << 11);bits &= !(1 << 12);bits |= 1 << 12;bits &= !(1 << 13);bits |= 1 << 13;bits &= !(1 << 14);bits &= !(1 << 15);bits &= !(1 << 2);bits &= !(1 << 7);bits &= !(1 << 8);bits &= !(1 << 9);w.bits(bits)
    });
    dp.GPIOD.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);let shift = 1 * 2;
        bits &= !(0b11 << shift);let shift = 10 * 2;
        bits &= !(0b11 << shift);let shift = 11 * 2;
        bits &= !(0b11 << shift);let shift = 12 * 2;
        bits &= !(0b11 << shift);let shift = 13 * 2;
        bits &= !(0b11 << shift);let shift = 14 * 2;
        bits &= !(0b11 << shift);let shift = 15 * 2;
        bits &= !(0b11 << shift);let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);let shift = 8 * 2;
        bits &= !(0b11 << shift);let shift = 9 * 2;
        bits &= !(0b11 << shift);w.bits(bits)
    });
    dp.GPIOD.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOD.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (0 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (10 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (11 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (12 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (4u32 & 0xF) << afr_shift;let afr_shift = (13 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (4u32 & 0xF) << afr_shift;let afr_shift = (14 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (15 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (7 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (8 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (9 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;w.bits(bits)
    });

    // GPIOE
    dp.GPIOE.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOE.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 0);bits &= !(1 << 1);bits &= !(1 << 10);bits &= !(1 << 11);bits &= !(1 << 12);bits &= !(1 << 13);bits &= !(1 << 14);bits &= !(1 << 15);bits &= !(1 << 3);bits &= !(1 << 4);bits &= !(1 << 5);bits &= !(1 << 6);bits &= !(1 << 7);bits &= !(1 << 8);bits &= !(1 << 9);w.bits(bits)
    });
    dp.GPIOE.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);let shift = 1 * 2;
        bits &= !(0b11 << shift);let shift = 10 * 2;
        bits &= !(0b11 << shift);let shift = 11 * 2;
        bits &= !(0b11 << shift);let shift = 12 * 2;
        bits &= !(0b11 << shift);let shift = 13 * 2;
        bits &= !(0b11 << shift);let shift = 14 * 2;
        bits &= !(0b11 << shift);let shift = 15 * 2;
        bits &= !(0b11 << shift);let shift = 3 * 2;
        bits &= !(0b11 << shift);let shift = 4 * 2;
        bits &= !(0b11 << shift);let shift = 5 * 2;
        bits &= !(0b11 << shift);let shift = 6 * 2;
        bits &= !(0b11 << shift);let shift = 7 * 2;
        bits &= !(0b11 << shift);let shift = 8 * 2;
        bits &= !(0b11 << shift);let shift = 9 * 2;
        bits &= !(0b11 << shift);w.bits(bits)
    });
    dp.GPIOE.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOE.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (0 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (10 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (11 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (12 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (13 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (14 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (15 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (3 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (4 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (5 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (6 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (7 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (8 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (9 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;w.bits(bits)
    });

    // GPIOF
    dp.GPIOF.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOF.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 0);bits &= !(1 << 1);bits &= !(1 << 10);bits &= !(1 << 11);bits &= !(1 << 12);bits &= !(1 << 13);bits &= !(1 << 14);bits &= !(1 << 15);bits &= !(1 << 2);bits &= !(1 << 3);bits &= !(1 << 4);bits &= !(1 << 5);bits &= !(1 << 6);bits &= !(1 << 7);bits &= !(1 << 8);bits &= !(1 << 9);w.bits(bits)
    });
    dp.GPIOF.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);let shift = 1 * 2;
        bits &= !(0b11 << shift);let shift = 10 * 2;
        bits &= !(0b11 << shift);let shift = 11 * 2;
        bits &= !(0b11 << shift);let shift = 12 * 2;
        bits &= !(0b11 << shift);let shift = 13 * 2;
        bits &= !(0b11 << shift);let shift = 14 * 2;
        bits &= !(0b11 << shift);let shift = 15 * 2;
        bits &= !(0b11 << shift);let shift = 2 * 2;
        bits &= !(0b11 << shift);let shift = 3 * 2;
        bits &= !(0b11 << shift);let shift = 4 * 2;
        bits &= !(0b11 << shift);let shift = 5 * 2;
        bits &= !(0b11 << shift);let shift = 6 * 2;
        bits &= !(0b11 << shift);let shift = 7 * 2;
        bits &= !(0b11 << shift);let shift = 8 * 2;
        bits &= !(0b11 << shift);let shift = 9 * 2;
        bits &= !(0b11 << shift);w.bits(bits)
    });
    dp.GPIOF.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOF.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (0 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (10 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (11 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (12 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (13 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (14 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (15 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (3 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (4 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (5 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (6 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (7 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (8 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (9 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;w.bits(bits)
    });

    // GPIOG
    dp.GPIOG.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOG.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 0);bits &= !(1 << 1);bits &= !(1 << 11);bits &= !(1 << 12);bits &= !(1 << 13);bits &= !(1 << 14);bits &= !(1 << 15);bits &= !(1 << 2);bits &= !(1 << 3);bits &= !(1 << 4);bits &= !(1 << 6);bits &= !(1 << 7);bits &= !(1 << 8);bits &= !(1 << 9);w.bits(bits)
    });
    dp.GPIOG.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);let shift = 1 * 2;
        bits &= !(0b11 << shift);let shift = 11 * 2;
        bits &= !(0b11 << shift);let shift = 12 * 2;
        bits &= !(0b11 << shift);let shift = 13 * 2;
        bits &= !(0b11 << shift);let shift = 14 * 2;
        bits &= !(0b11 << shift);let shift = 15 * 2;
        bits &= !(0b11 << shift);let shift = 2 * 2;
        bits &= !(0b11 << shift);let shift = 3 * 2;
        bits &= !(0b11 << shift);let shift = 4 * 2;
        bits &= !(0b11 << shift);let shift = 6 * 2;
        bits &= !(0b11 << shift);let shift = 7 * 2;
        bits &= !(0b11 << shift);let shift = 8 * 2;
        bits &= !(0b11 << shift);let shift = 9 * 2;
        bits &= !(0b11 << shift);w.bits(bits)
    });
    dp.GPIOG.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOG.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (0 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (11 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (12 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (13 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (14 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (15 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (3 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (4 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (6 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (7 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (8 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (9 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b01 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;w.bits(bits)
    });

    // GPIOH
    dp.GPIOH.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOH.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 10);bits &= !(1 << 11);bits &= !(1 << 12);bits &= !(1 << 13);bits &= !(1 << 14);bits &= !(1 << 15);bits &= !(1 << 2);bits &= !(1 << 3);bits &= !(1 << 4);bits &= !(1 << 5);bits &= !(1 << 6);bits &= !(1 << 7);bits &= !(1 << 8);bits &= !(1 << 9);w.bits(bits)
    });
    dp.GPIOH.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 10 * 2;
        bits &= !(0b11 << shift);let shift = 11 * 2;
        bits &= !(0b11 << shift);let shift = 12 * 2;
        bits &= !(0b11 << shift);let shift = 13 * 2;
        bits &= !(0b11 << shift);let shift = 14 * 2;
        bits &= !(0b11 << shift);let shift = 15 * 2;
        bits &= !(0b11 << shift);let shift = 2 * 2;
        bits &= !(0b11 << shift);let shift = 3 * 2;
        bits &= !(0b11 << shift);let shift = 4 * 2;
        bits &= !(0b11 << shift);let shift = 5 * 2;
        bits &= !(0b11 << shift);let shift = 6 * 2;
        bits &= !(0b11 << shift);let shift = 7 * 2;
        bits &= !(0b11 << shift);let shift = 8 * 2;
        bits &= !(0b11 << shift);let shift = 9 * 2;
        bits &= !(0b11 << shift);w.bits(bits)
    });
    dp.GPIOH.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOH.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (10 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (11 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (12 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (13 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (14 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (15 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (3 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (4 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (5 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (6 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (7 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (8 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (9 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;w.bits(bits)
    });

    // GPIOI
    dp.GPIOI.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOI.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 0);bits &= !(1 << 1);bits &= !(1 << 10);bits &= !(1 << 11);bits &= !(1 << 12);bits &= !(1 << 13);bits &= !(1 << 14);bits &= !(1 << 15);bits &= !(1 << 2);bits &= !(1 << 3);bits &= !(1 << 4);bits &= !(1 << 5);bits &= !(1 << 6);bits &= !(1 << 7);bits &= !(1 << 8);bits &= !(1 << 9);w.bits(bits)
    });
    dp.GPIOI.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);let shift = 1 * 2;
        bits &= !(0b11 << shift);let shift = 10 * 2;
        bits &= !(0b11 << shift);let shift = 11 * 2;
        bits &= !(0b11 << shift);let shift = 12 * 2;
        bits &= !(0b11 << shift);let shift = 13 * 2;
        bits &= !(0b11 << shift);let shift = 14 * 2;
        bits &= !(0b11 << shift);let shift = 15 * 2;
        bits &= !(0b11 << shift);let shift = 2 * 2;
        bits &= !(0b11 << shift);let shift = 3 * 2;
        bits &= !(0b11 << shift);let shift = 4 * 2;
        bits &= !(0b11 << shift);let shift = 5 * 2;
        bits &= !(0b11 << shift);let shift = 6 * 2;
        bits &= !(0b11 << shift);let shift = 7 * 2;
        bits &= !(0b11 << shift);let shift = 8 * 2;
        bits &= !(0b11 << shift);let shift = 9 * 2;
        bits &= !(0b11 << shift);w.bits(bits)
    });
    dp.GPIOI.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOI.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (0 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (10 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (11 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (12 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (13 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (14 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (15 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (3 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (4 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (5 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (6 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (7 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (8 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (9 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b01 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b01 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b01 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b01 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;w.bits(bits)
    });

    // GPIOJ
    dp.GPIOJ.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOJ.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 0);bits &= !(1 << 1);bits &= !(1 << 10);bits &= !(1 << 11);bits &= !(1 << 12);bits &= !(1 << 13);bits &= !(1 << 15);bits &= !(1 << 2);bits &= !(1 << 3);bits &= !(1 << 4);bits &= !(1 << 5);bits &= !(1 << 6);bits &= !(1 << 7);bits &= !(1 << 8);bits &= !(1 << 9);w.bits(bits)
    });
    dp.GPIOJ.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);let shift = 1 * 2;
        bits &= !(0b11 << shift);let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);let shift = 13 * 2;
        bits &= !(0b11 << shift);let shift = 15 * 2;
        bits &= !(0b11 << shift);let shift = 2 * 2;
        bits &= !(0b11 << shift);let shift = 3 * 2;
        bits &= !(0b11 << shift);let shift = 4 * 2;
        bits &= !(0b11 << shift);let shift = 5 * 2;
        bits &= !(0b11 << shift);let shift = 6 * 2;
        bits &= !(0b11 << shift);let shift = 7 * 2;
        bits &= !(0b11 << shift);let shift = 8 * 2;
        bits &= !(0b11 << shift);let shift = 9 * 2;
        bits &= !(0b11 << shift);w.bits(bits)
    });
    dp.GPIOJ.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOJ.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (0 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (10 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (11 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (12 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (13 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (15 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (3 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (4 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (5 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (6 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (7 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (8 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (9 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b01 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;w.bits(bits)
    });

    // GPIOK
    dp.GPIOK.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOK.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 0);bits &= !(1 << 1);bits &= !(1 << 2);bits &= !(1 << 3);bits &= !(1 << 4);bits &= !(1 << 5);bits &= !(1 << 6);bits &= !(1 << 7);w.bits(bits)
    });
    dp.GPIOK.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);let shift = 3 * 2;
        bits &= !(0b11 << shift);let shift = 4 * 2;
        bits &= !(0b11 << shift);let shift = 5 * 2;
        bits &= !(0b11 << shift);let shift = 6 * 2;
        bits &= !(0b11 << shift);let shift = 7 * 2;
        bits &= !(0b11 << shift);w.bits(bits)
    });
    dp.GPIOK.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOK.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (0 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (3 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (4 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (5 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (6 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (7 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });


}



/// Disables unused peripherals and masks their interrupts.


/// Enables peripheral clocks for the generated board using PAC registers.

pub fn enable_peripherals(_dp: &pac::Peripherals) {

}



/// De-initializes board pins to their analog state.


/// De-initializes board peripherals and clocks using PAC registers.

pub fn deinit_board_pac(dp: &pac::Peripherals) {
    // Return pins to analog and remove pulls/open-drain
    let shift = 0 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 1 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 2 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 5 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 7 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 5 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 0 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 2 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 2 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 3 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 8 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 7 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 3 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 11 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 6 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 10 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 15 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 2 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });

    // Gate peripheral clocks

    // Disable DMA controllers and mask their interrupts

    // Disable interrupts
    unsafe { pac::NVIC::mask(pac::Interrupt::I2C4_EV); }
    unsafe { pac::NVIC::mask(pac::Interrupt::I2C4_ER); }
    unsafe { pac::NVIC::mask(pac::Interrupt::SPI2); }
    unsafe { pac::NVIC::mask(pac::Interrupt::SPI5); }
    unsafe { pac::NVIC::mask(pac::Interrupt::UART8); }
    unsafe { pac::NVIC::mask(pac::Interrupt::USART1); }
}




/// Initializes the board using PAC register access.


/// Initializes the board using PAC register access.

pub fn init_board_pac(dp: pac::Peripherals) {
    enable_gpio_clocks(&dp);
    configure_pins_pac(&dp);
    enable_peripherals(&dp);
}



