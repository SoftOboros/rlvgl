
/* Auto-generated by rlvgl-creator
 * SPDX-FileCopyrightText: 2020 STMicroelectronics
 * SPDX-FileCopyrightText: 2025 Softoboros Technology, Inc.
 * SPDX-License-Identifier: BSD-3-Clause
 * Provenance: STM32_open_pin_data (commit <hash>), build <build-hash>.

 */

//! HAL BSP for the generated board.

#![allow(non_snake_case)]
#![allow(clippy::too_many_arguments)]



/// Clock initialization ownership: cm7
#[doc(hidden)]
pub const CLOCKS_INIT_BY: &str = "cm7";


/// Secondary core helper: wait for system clocks initialized by the primary core.
pub fn wait_for_clocks() {
    // TODO: Implement HSEM/EXTI or shared-flag wait as needed.
}






    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    





    
        
            
                
            
        
    

    
        
            
            
        
    

    
        
            
            
        
    

    
        
            
            
        
    

    
        
            
                
            
        
    

    

    

    




    

use stm32h7xx_hal::{gpio::Speed, pac, prelude::*};

use stm32h7xx_hal::rcc;











/// Enables GPIO clocks required by the generated board.

pub fn enable_gpio_clocks(dp: &pac::Peripherals) {
    
    
    const MASK: u32 = (1u32 << 
0) |(1u32 << 
1) |(1u32 << 
2) |(1u32 << 
3) |(1u32 << 
4) |(1u32 << 
5) |(1u32 << 
6) |(1u32 << 
7) |(1u32 << 
8) |(1u32 << 
9) |(1u32 << 
10);
    dp.RCC.ahb4enr
.modify(|r, w| unsafe { w.bits(r.bits() | MASK) });
    
    
}



/// Configures pins using the HAL API and returns GPIO parts.

pub struct GpioParts {

    pub gpioa: stm32h7xx_hal::gpio::gpioa::Parts,

    pub gpiob: stm32h7xx_hal::gpio::gpiob::Parts,

    pub gpioc: stm32h7xx_hal::gpio::gpioc::Parts,

    pub gpiod: stm32h7xx_hal::gpio::gpiod::Parts,

    pub gpioe: stm32h7xx_hal::gpio::gpioe::Parts,

    pub gpiof: stm32h7xx_hal::gpio::gpiof::Parts,

    pub gpiog: stm32h7xx_hal::gpio::gpiog::Parts,

    pub gpioh: stm32h7xx_hal::gpio::gpioh::Parts,

    pub gpioi: stm32h7xx_hal::gpio::gpioi::Parts,

    pub gpioj: stm32h7xx_hal::gpio::gpioj::Parts,

    pub gpiok: stm32h7xx_hal::gpio::gpiok::Parts,

}

pub fn configure_pins_hal(dp: pac::Peripherals, ccdr: &rcc::Ccdr) -> GpioParts {

    let gpioa = dp.GPIOA.split(ccdr.peripheral.GPIOA);

    let gpiob = dp.GPIOB.split(ccdr.peripheral.GPIOB);

    let gpioc = dp.GPIOC.split(ccdr.peripheral.GPIOC);

    let gpiod = dp.GPIOD.split(ccdr.peripheral.GPIOD);

    let gpioe = dp.GPIOE.split(ccdr.peripheral.GPIOE);

    let gpiof = dp.GPIOF.split(ccdr.peripheral.GPIOF);

    let gpiog = dp.GPIOG.split(ccdr.peripheral.GPIOG);

    let gpioh = dp.GPIOH.split(ccdr.peripheral.GPIOH);

    let gpioi = dp.GPIOI.split(ccdr.peripheral.GPIOI);

    let gpioj = dp.GPIOJ.split(ccdr.peripheral.GPIOJ);

    let gpiok = dp.GPIOK.split(ccdr.peripheral.GPIOK);

// PA0 ADCx_INP0 AF0 (ARD_A2)
    let ard_a2 = gpioa.pa0.into_alternate::<0>();
// PA1 ETH_REF_CLK AF0 (ARD_A3)
    let ard_a3_2 = gpioa.pa1.into_alternate::<0>();
// PA10 USART1_RX AF0 (STLINK_TX)
    let stlink_tx = gpioa.pa10.into_alternate::<0>();
// PA11 SPI2_NSS AF0 (PMOD\#1)
    let pmod_1 = gpioa.pa11.into_alternate::<0>().set_speed(Speed::VeryHigh);
// PA12 SPI2_SCK AF0 (SPI2_SCK)
    let spi2_sck = gpioa.pa12.into_alternate::<0>().set_speed(Speed::VeryHigh);
// PA1 ADCx_INP1 AF0 (ARD_A3)
    let ard_a3_2 = gpioa.pa1.into_alternate::<0>();
// PA2 ETH_MDIO AF0 (ETH_MDIO)
    let eth_mdio = gpioa.pa2.into_alternate::<0>();
// PA3 USB_OTG_HS_ULPI_D0 AF0 (ULPI_D0)
    let ulpi_d0 = gpioa.pa3.into_alternate::<0>();
// PA5 USB_OTG_HS_ULPI_CK AF0 (ULPI_CK)
    let ulpi_ck = gpioa.pa5.into_alternate::<0>();
// PA7 ETH_CRS_DV AF0 (ETH_CRS_DV)
    let eth_crs_dv = gpioa.pa7.into_alternate::<0>();
// PA8 RCC_MCO_1 AF0 (CEC_CK/MCO1)
    let cec_ck_mco1 = gpioa.pa8.into_alternate::<0>();
// PA9 USART1_TX AF0 (STLINK_RX)
    let stlink_rx = gpioa.pa9.into_alternate::<0>();
// PB0 USB_OTG_HS_ULPI_D1 AF0 (ULPI_D1)
    let ulpi_d1 = gpiob.pb0.into_alternate::<0>();
// PB1 USB_OTG_HS_ULPI_D2 AF0 (ULPI_D2)
    let ulpi_d2 = gpiob.pb1.into_alternate::<0>();
// PB10 USB_OTG_HS_ULPI_D3 AF0 (ULPI_D3)
    let ulpi_d3 = gpiob.pb10.into_alternate::<0>();
// PB11 USB_OTG_HS_ULPI_D4 AF0 (ULPI_D4)
    let ulpi_d4 = gpiob.pb11.into_alternate::<0>();
// PB12 USB_OTG_HS_ULPI_D5 AF0 (ULPI_D5)
    let ulpi_d5 = gpiob.pb12.into_alternate::<0>();
// PB13 USB_OTG_HS_ULPI_D6 AF0 (ULPI_D6)
    let ulpi_d6 = gpiob.pb13.into_alternate::<0>();
// PB14 GPIO_Input AF0 (PMOD\#9)
    let pmod_9 = gpiob.pb14.into_floating_input();
// PB15 GPIO_Input AF0 (PMOD\#8)
    let pmod_8 = gpiob.pb15.into_floating_input();
// PB2 QUADSPI_CLK AF0 (QSPI_CLK)
    let qspi_clk = gpiob.pb2.into_alternate::<0>();
// PB5 USB_OTG_HS_ULPI_D7 AF0 (ULPI_D7)
    let ulpi_d7 = gpiob.pb5.into_alternate::<0>();
// PB6 CEC AF0 (HDMI_CEC)
    let hdmi_cec = gpiob.pb6.into_alternate::<0>();
// PC0 USB_OTG_HS_ULPI_STP AF0 (ULPI_STP)
    let ulpi_stp = gpioc.pc0.into_alternate::<0>();
// PC1 ETH_MDC AF0 (ETH_MDC/SAI4_D1)
    let eth_mdc_sai4_d1 = gpioc.pc1.into_alternate::<0>();
// PC10 SDMMC1_D2 AF0 (SDIO1_D2)
    let sdio1_d2 = gpioc.pc10.into_alternate::<0>().set_speed(Speed::VeryHigh);
// PC11 SDMMC1_D3 AF0 (SDIO1_D3)
    let sdio1_d3 = gpioc.pc11.into_alternate::<0>().set_speed(Speed::VeryHigh);
// PC12 SDMMC1_CK AF0 (SDIO1_CK)
    let sdio1_ck = gpioc.pc12.into_alternate::<0>().set_speed(Speed::VeryHigh);
// PC13 RTC_TAMP1 AF0 (B2 [Wakeup Button])
    let b2_wakeup_button = gpioc.pc13.into_alternate::<0>();
// PC2 SPI2_MISO AF0 (ARD_A4)
    let ard_a4_2 = gpioc.pc2.into_alternate::<0>().set_speed(Speed::VeryHigh);
// PC2 ADC3_INP0 AF0 (ARD_A4)
    let ard_a4_2 = gpioc.pc2.into_alternate::<0>();
// PC3 SPI2_MOSI AF0 (ARD_A5)
    let ard_a5_2 = gpioc.pc3.into_alternate::<0>().set_speed(Speed::VeryHigh);
// PC3 ADC3_INP1 AF0 (ARD_A5)
    let ard_a5_2 = gpioc.pc3.into_alternate::<0>();
// PC4 ETH_RXD0 AF0 (ETH_RXD0)
    let eth_rxd0 = gpioc.pc4.into_alternate::<0>();
// PC5 ETH_RXD1 AF0 (ETH_RXD1)
    let eth_rxd1 = gpioc.pc5.into_alternate::<0>();
// PC8 SDMMC1_D0 AF0 (SDIO1_D0)
    let sdio1_d0 = gpioc.pc8.into_alternate::<0>().set_speed(Speed::VeryHigh);
// PC9 SDMMC1_D1 AF0 (SDIO1_D1)
    let sdio1_d1 = gpioc.pc9.into_alternate::<0>().set_speed(Speed::VeryHigh);
// PD0 FMC_D2_DA2 AF0 (FMC_D2)
    let fmc_d2 = gpiod.pd0.into_alternate::<0>();
// PD1 FMC_D3_DA3 AF0 (FMC_D3)
    let fmc_d3 = gpiod.pd1.into_alternate::<0>();
// PD10 FMC_D15_DA15 AF0 (FMC_D15)
    let fmc_d15 = gpiod.pd10.into_alternate::<0>();
// PD11 QUADSPI_BK1_IO0 AF0 (QSPI_BK1_IO0)
    let qspi_bk1_io0 = gpiod.pd11.into_alternate::<0>();
// PD12 I2C4_SCL AF4
    let pd12 = gpiod.pd12.into_alternate_open_drain::<4>().internal_pull_up(true);
// PD13 I2C4_SDA AF4
    let pd13 = gpiod.pd13.into_alternate_open_drain::<4>().internal_pull_up(true);
// PD14 FMC_D0_DA0 AF0 (FMC_D0)
    let fmc_d0 = gpiod.pd14.into_alternate::<0>();
// PD15 FMC_D1_DA1 AF0 (FMC_D1)
    let fmc_d1 = gpiod.pd15.into_alternate::<0>();
// PD2 SDMMC1_CMD AF0 (SDIO1_CMD)
    let sdio1_cmd = gpiod.pd2.into_alternate::<0>().set_speed(Speed::VeryHigh);
// PD7 SPDIFRX1_IN0 AF0 (SPDIF_RX0)
    let spdif_rx0 = gpiod.pd7.into_alternate::<0>();
// PD8 FMC_D13_DA13 AF0 (FMC_D13)
    let fmc_d13 = gpiod.pd8.into_alternate::<0>();
// PD9 FMC_D14_DA14 AF0 (FMC_D14)
    let fmc_d14 = gpiod.pd9.into_alternate::<0>();
// PE0 FMC_NBL0 AF0 (FMC_NBL0)
    let fmc_nbl0 = gpioe.pe0.into_alternate::<0>();
// PE1 FMC_NBL1 AF0 (FMC_NBL1)
    let fmc_nbl1 = gpioe.pe1.into_alternate::<0>();
// PE10 FMC_D7_DA7 AF0 (FMC_D7)
    let fmc_d7 = gpioe.pe10.into_alternate::<0>();
// PE11 FMC_D8_DA8 AF0 (FMC_D8)
    let fmc_d8 = gpioe.pe11.into_alternate::<0>();
// PE12 FMC_D9_DA9 AF0 (FMC_D9)
    let fmc_d9 = gpioe.pe12.into_alternate::<0>();
// PE13 FMC_D10_DA10 AF0 (FMC_D10)
    let fmc_d10 = gpioe.pe13.into_alternate::<0>();
// PE14 FMC_D11_DA11 AF0 (FMC_D11)
    let fmc_d11 = gpioe.pe14.into_alternate::<0>();
// PE15 FMC_D12_DA12 AF0 (FMC_D12)
    let fmc_d12 = gpioe.pe15.into_alternate::<0>();
// PE3 SAI1_SD_B AF0 (SAI1_SD_B)
    let sai1_sd_b = gpioe.pe3.into_alternate::<0>();
// PE4 SAI1_FS_A AF0 (SAI1_FS_A)
    let sai1_fs_a = gpioe.pe4.into_alternate::<0>();
// PE5 SAI1_SCK_A AF0 (SAI1_SCK_A)
    let sai1_sck_a = gpioe.pe5.into_alternate::<0>();
// PE6 SAI1_SD_A AF0 (SAI1_SD_A)
    let sai1_sd_a = gpioe.pe6.into_alternate::<0>();
// PE7 FMC_D4_DA4 AF0 (FMC_D4)
    let fmc_d4 = gpioe.pe7.into_alternate::<0>();
// PE8 FMC_D5_DA5 AF0 (FMC_D5)
    let fmc_d5 = gpioe.pe8.into_alternate::<0>();
// PE9 FMC_D6_DA6 AF0 (FMC_D6)
    let fmc_d6 = gpioe.pe9.into_alternate::<0>();
// PF0 FMC_A0 AF0 (FMC_A0)
    let fmc_a0 = gpiof.pf0.into_alternate::<0>();
// PF1 FMC_A1 AF0 (FMC_A1)
    let fmc_a1 = gpiof.pf1.into_alternate::<0>();
// PF10 ADC3_INP6 AF0 (ARD_A1)
    let ard_a1 = gpiof.pf10.into_alternate::<0>();
// PF11 FMC_SDNRAS AF0 (FMC_SDRAS)
    let fmc_sdras = gpiof.pf11.into_alternate::<0>();
// PF12 FMC_A6 AF0 (FMC_A6)
    let fmc_a6 = gpiof.pf12.into_alternate::<0>();
// PF13 FMC_A7 AF0 (FMC_A7)
    let fmc_a7 = gpiof.pf13.into_alternate::<0>();
// PF14 FMC_A8 AF0 (FMC_A8)
    let fmc_a8 = gpiof.pf14.into_alternate::<0>();
// PF15 FMC_A9 AF0 (FMC_A9)
    let fmc_a9 = gpiof.pf15.into_alternate::<0>();
// PF2 FMC_A2 AF0 (FMC_A2)
    let fmc_a2 = gpiof.pf2.into_alternate::<0>();
// PF3 FMC_A3 AF0 (FMC_A3)
    let fmc_a3 = gpiof.pf3.into_alternate::<0>();
// PF4 FMC_A4 AF0 (FMC_A4)
    let fmc_a4 = gpiof.pf4.into_alternate::<0>();
// PF5 FMC_A5 AF0 (FMC_A5)
    let fmc_a5 = gpiof.pf5.into_alternate::<0>();
// PF6 QUADSPI_BK1_IO3 AF0 (QSPI_BK1_IO3)
    let qspi_bk1_io3 = gpiof.pf6.into_alternate::<0>();
// PF7 QUADSPI_BK1_IO2 AF0 (QSPI_BK1_IO2)
    let qspi_bk1_io2 = gpiof.pf7.into_alternate::<0>();
// PF8 S_TIM13_CH1 AF0 (PMOD\#14/ARD_D3)
    let pmod_14_ard_d3 = gpiof.pf8.into_alternate::<0>();
// PF9 QUADSPI_BK1_IO1 AF0 (QSPI_BK1_IO1)
    let qspi_bk1_io1 = gpiof.pf9.into_alternate::<0>();
// PG0 FMC_A10 AF0 (FMC_A10)
    let fmc_a10 = gpiog.pg0.into_alternate::<0>();
// PG1 FMC_A11 AF0 (FMC_A11)
    let fmc_a11 = gpiog.pg1.into_alternate::<0>();
// PG11 ETH_TX_EN AF0 (ETH_TX_EN)
    let eth_tx_en = gpiog.pg11.into_alternate::<0>();
// PG12 ETH_TXD1 AF0 (ETH_TXD1)
    let eth_txd1 = gpiog.pg12.into_alternate::<0>();
// PG13 ETH_TXD0 AF0 (ETH_TXD0)
    let eth_txd0 = gpiog.pg13.into_alternate::<0>();
// PG14 QUADSPI_BK2_IO3 AF0 (QSPI_BK2_IO3)
    let qspi_bk2_io3 = gpiog.pg14.into_alternate::<0>();
// PG15 FMC_SDNCAS AF0 (FMC_SDCAS)
    let fmc_sdcas = gpiog.pg15.into_alternate::<0>();
// PG2 FMC_A12 AF0 (FMC_A12)
    let fmc_a12 = gpiog.pg2.into_alternate::<0>();
// PG3 GPIO_Output AF0 (DSI_Reset)
    let dsi_reset = gpiog.pg3.into_push_pull_output();
// PG4 FMC_A14_BA0 AF0 (FMC_BA0)
    let fmc_ba0 = gpiog.pg4.into_alternate::<0>();
// PG6 QUADSPI_BK1_NCS AF0 (QSPI_BK1_NCS)
    let qspi_bk1_ncs = gpiog.pg6.into_alternate::<0>();
// PG7 SAI1_MCLK_A AF0 (SAI1_MCLK_A)
    let sai1_mclk_a = gpiog.pg7.into_alternate::<0>();
// PG8 FMC_SDCLK AF0 (FMC_SDCLK)
    let fmc_sdclk = gpiog.pg8.into_alternate::<0>();
// PG9 QUADSPI_BK2_IO2 AF0 (QSPI_BK2_IO2)
    let qspi_bk2_io2 = gpiog.pg9.into_alternate::<0>();
// PH10 FMC_D18 AF0 (FMC_D18)
    let fmc_d18 = gpioh.ph10.into_alternate::<0>();
// PH11 FMC_D19 AF0 (FMC_D19)
    let fmc_d19 = gpioh.ph11.into_alternate::<0>();
// PH12 FMC_D20 AF0 (FMC_D20)
    let fmc_d20 = gpioh.ph12.into_alternate::<0>();
// PH13 FMC_D21 AF0 (FMC_D21)
    let fmc_d21 = gpioh.ph13.into_alternate::<0>();
// PH14 FMC_D22 AF0 (FMC_D22)
    let fmc_d22 = gpioh.ph14.into_alternate::<0>();
// PH15 FMC_D23 AF0 (FMC_D23)
    let fmc_d23 = gpioh.ph15.into_alternate::<0>();
// PH2 QUADSPI_BK2_IO0 AF0 (QSPI_BK2_IO0)
    let qspi_bk2_io0 = gpioh.ph2.into_alternate::<0>();
// PH3 QUADSPI_BK2_IO1 AF0 (QSPI_BK2_IO1)
    let qspi_bk2_io1 = gpioh.ph3.into_alternate::<0>();
// PH4 USB_OTG_HS_ULPI_NXT AF0 (ULPI_NXT)
    let ulpi_nxt = gpioh.ph4.into_alternate::<0>();
// PH5 FMC_SDNWE AF0 (FMC_SDNWE)
    let fmc_sdnwe = gpioh.ph5.into_alternate::<0>();
// PH6 FMC_SDNE1 AF0 (FMC_SDNE1)
    let fmc_sdne1 = gpioh.ph6.into_alternate::<0>();
// PH7 FMC_SDCKE1 AF0 (FMC_SDCKE1)
    let fmc_sdcke1 = gpioh.ph7.into_alternate::<0>();
// PH8 FMC_D16 AF0 (FMC_D16)
    let fmc_d16 = gpioh.ph8.into_alternate::<0>();
// PH9 FMC_D17 AF0 (FMC_D17)
    let fmc_d17 = gpioh.ph9.into_alternate::<0>();
// PI0 FMC_D24 AF0 (FMC_D24)
    let fmc_d24 = gpioi.pi0.into_alternate::<0>();
// PI1 FMC_D25 AF0 (FMC_D25)
    let fmc_d25 = gpioi.pi1.into_alternate::<0>();
// PI10 FMC_D31 AF0 (FMC_D31)
    let fmc_d31 = gpioi.pi10.into_alternate::<0>();
// PI11 USB_OTG_HS_ULPI_DIR AF0 (ULPI_DIR)
    let ulpi_dir = gpioi.pi11.into_alternate::<0>();
// PI12 GPIO_Output AF0 (LED1)
    let led1 = gpioi.pi12.into_push_pull_output();
// PI13 GPIO_Output AF0 (LED2)
    let led2 = gpioi.pi13.into_push_pull_output();
// PI14 GPIO_Output AF0 (LED3)
    let led3 = gpioi.pi14.into_push_pull_output();
// PI15 GPIO_Output AF0 (LED4)
    let led4 = gpioi.pi15.into_push_pull_output();
// PI2 FMC_D26 AF0 (FMC_D26)
    let fmc_d26 = gpioi.pi2.into_alternate::<0>();
// PI3 FMC_D27 AF0 (FMC_D27)
    let fmc_d27 = gpioi.pi3.into_alternate::<0>();
// PI4 FMC_NBL2 AF0 (FMC_NBL2)
    let fmc_nbl2 = gpioi.pi4.into_alternate::<0>();
// PI5 FMC_NBL3 AF0 (FMC_NBL3)
    let fmc_nbl3 = gpioi.pi5.into_alternate::<0>();
// PI6 FMC_D28 AF0 (FMC_D28)
    let fmc_d28 = gpioi.pi6.into_alternate::<0>();
// PI7 FMC_D29 AF0 (FMC_D29)
    let fmc_d29 = gpioi.pi7.into_alternate::<0>();
// PI8 GPIO_Input AF0 (uSD_Detect)
    let usd_detect = gpioi.pi8.into_floating_input();
// PI9 FMC_D30 AF0 (FMC_D30)
    let fmc_d30 = gpioi.pi9.into_alternate::<0>();
// PJ0 GPIO_Input AF0 (ARD_D7)
    let ard_d7 = gpioj.pj0.into_floating_input();
// PJ1 GPIO_Input AF0 (OTG_HS_OverCurrent)
    let otg_hs_overcurrent = gpioj.pj1.into_floating_input();
// PJ10 SPI5_MOSI AF0 (ARD_D11)
    let ard_d11 = gpioj.pj10.into_alternate::<0>().set_speed(Speed::VeryHigh);
// PJ11 SPI5_MISO AF0 (ARD_D12)
    let ard_d12 = gpioj.pj11.into_alternate::<0>().set_speed(Speed::VeryHigh);
// PJ12 GPIO_Output AF0 (BL_CTRL)
    let bl_ctrl = gpioj.pj12.into_push_pull_output();
// PJ13 GPIO_Input AF0 (PMOD\#12)
    let pmod_12 = gpioj.pj13.into_floating_input();
// PJ15 GPIO_Input AF0 (Audio_INT)
    let audio_int = gpioj.pj15.into_floating_input();
// PJ2 DSIHOST_TE AF0 (DSI_TE)
    let dsi_te = gpioj.pj2.into_alternate::<0>();
// PJ3 GPIO_Input AF0 (ARD_D2)
    let ard_d2 = gpioj.pj3.into_floating_input();
// PJ4 GPIO_Input AF0 (ARD_D4)
    let ard_d4 = gpioj.pj4.into_floating_input();
// PJ5 GPIO_Input AF0 (ARD_D8)
    let ard_d8 = gpioj.pj5.into_floating_input();
// PJ6 S_TIM8_CH2 AF3 (ARD_D9)
    let ard_d9 = gpioj.pj6.into_alternate::<3>();
// PJ7 TIM8_CH2N AF3 (ARD_D6)
    let ard_d6 = gpioj.pj7.into_alternate::<3>();
// PJ8 UART8_TX AF0 (ARD_D1)
    let ard_d1 = gpioj.pj8.into_alternate::<0>();
// PJ9 UART8_RX AF0 (ARD_D0)
    let ard_d0 = gpioj.pj9.into_alternate::<0>();
// PK0 SPI5_SCK AF0 (ARD_D13)
    let ard_d13 = gpiok.pk0.into_alternate::<0>().set_speed(Speed::VeryHigh);
// PK1 SPI5_NSS AF0 (ARD_D10)
    let ard_d10 = gpiok.pk1.into_alternate::<0>().set_speed(Speed::VeryHigh);
// PK2 GPIO_Input AF0 (JOY_SEL)
    let joy_sel = gpiok.pk2.into_floating_input();
// PK3 GPIO_Input AF0 (JOY_DOWN)
    let joy_down = gpiok.pk3.into_floating_input();
// PK4 GPIO_Input AF0 (JOY_LEFT)
    let joy_left = gpiok.pk4.into_floating_input();
// PK5 GPIO_Input AF0 (JOY_RIGHT)
    let joy_right = gpiok.pk5.into_floating_input();
// PK6 GPIO_Input AF0 (JOY_UP)
    let joy_up = gpiok.pk6.into_floating_input();
// PK7 GPIO_Input AF0 (TOUCH_INT)
    let touch_int = gpiok.pk7.into_floating_input();


    GpioParts {
    
        gpioa,
    
        gpiob,
    
        gpioc,
    
        gpiod,
    
        gpioe,
    
        gpiof,
    
        gpiog,
    
        gpioh,
    
        gpioi,
    
        gpioj,
    
        gpiok,
    
    }
}



/// Enables peripheral clocks for the generated board.

pub fn enable_peripherals(dp: &pac::Peripherals) {


}



/// De-initializes board peripherals and clocks.

pub fn deinit_board_hal(dp: &pac::Peripherals) {
    // Return pins to analog and remove pulls/open-drain
    let shift = 0 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 1 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 2 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 5 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 7 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 5 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 0 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 2 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 2 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 3 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 8 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 7 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 3 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 11 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 6 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 10 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 15 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 2 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });

    // Gate peripheral clocks

    // Disable DMA controllers and mask their interrupts

    // Disable interrupts
    unsafe { pac::NVIC::mask(pac::Interrupt::I2C4_EV); }
    unsafe { pac::NVIC::mask(pac::Interrupt::I2C4_ER); }
    unsafe { pac::NVIC::mask(pac::Interrupt::SPI2); }
    unsafe { pac::NVIC::mask(pac::Interrupt::SPI5); }
    unsafe { pac::NVIC::mask(pac::Interrupt::UART8); }
    unsafe { pac::NVIC::mask(pac::Interrupt::USART1); }
}



/// Initializes the board using HAL drivers and returns GPIO parts.

pub fn init_board_hal(dp: pac::Peripherals, ccdr: &rcc::Ccdr /*, clocks */) -> GpioParts {
    enable_gpio_clocks(&dp);
    enable_peripherals(&dp);
    configure_pins_hal(dp, ccdr)
}