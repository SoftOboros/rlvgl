
/* Auto-generated by rlvgl-creator
 * SPDX-FileCopyrightText: 2020 STMicroelectronics
 * SPDX-FileCopyrightText: 2025 Softoboros Technology, Inc.
 * SPDX-License-Identifier: BSD-3-Clause
 * Provenance: STM32_open_pin_data (commit <hash>), build <build-hash>.

*/

//! PAC BSP for the generated board.

#![allow(non_snake_case)]
#![allow(clippy::too_many_arguments)]



/// Clock initialization ownership: cm7
#[doc(hidden)]
pub const CLOCKS_INIT_BY: &str = "cm7";


/// Secondary core helper: wait for system clocks initialized by the primary core.
pub fn wait_for_clocks() {
    // TODO: Implement HSEM/EXTI or shared-flag wait as needed.
}






    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    





    
        
            
                
            
        
    

    
        
            
            
        
    

    
        
            
            
        
    

    
        
            
            
        
    

    
        
            
                
            
        
    

    

    

    




    
    

use stm32h7::stm32h747 as pac;





/// Enables GPIO clocks required by the generated board.

pub fn enable_gpio_clocks(dp: &pac::Peripherals) {
    
    
    const MASK: u32 = (1u32 << 
0) |(1u32 << 
1) |(1u32 << 
2) |(1u32 << 
3) |(1u32 << 
4) |(1u32 << 
5) |(1u32 << 
6) |(1u32 << 
7) |(1u32 << 
8) |(1u32 << 
9) |(1u32 << 
10);
    dp.RCC.ahb4enr
.modify(|r, w| unsafe { w.bits(r.bits() | MASK) });
    
    
}



/// Configures pins using PAC registers.

pub fn configure_pins_pac(dp: &pac::Peripherals) {


    // GPIOA
    dp.GPIOA.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOA.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 0);bits &= !(1 << 1);bits &= !(1 << 10);bits &= !(1 << 11);bits &= !(1 << 12);bits &= !(1 << 1);bits &= !(1 << 2);bits &= !(1 << 3);bits &= !(1 << 5);bits &= !(1 << 7);bits &= !(1 << 8);bits &= !(1 << 9);w.bits(bits)
    });
    dp.GPIOA.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);let shift = 1 * 2;
        bits &= !(0b11 << shift);let shift = 10 * 2;
        bits &= !(0b11 << shift);let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);let shift = 2 * 2;
        bits &= !(0b11 << shift);let shift = 3 * 2;
        bits &= !(0b11 << shift);let shift = 5 * 2;
        bits &= !(0b11 << shift);let shift = 7 * 2;
        bits &= !(0b11 << shift);let shift = 8 * 2;
        bits &= !(0b11 << shift);let shift = 9 * 2;
        bits &= !(0b11 << shift);w.bits(bits)
    });
    dp.GPIOA.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOA.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (0 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (10 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (11 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (12 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (3 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (5 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (7 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (8 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (9 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;w.bits(bits)
    });

    // GPIOB
    dp.GPIOB.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOB.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 0);bits &= !(1 << 1);bits &= !(1 << 10);bits &= !(1 << 11);bits &= !(1 << 12);bits &= !(1 << 13);bits &= !(1 << 14);bits &= !(1 << 15);bits &= !(1 << 2);bits &= !(1 << 5);bits &= !(1 << 6);w.bits(bits)
    });
    dp.GPIOB.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);let shift = 1 * 2;
        bits &= !(0b11 << shift);let shift = 10 * 2;
        bits &= !(0b11 << shift);let shift = 11 * 2;
        bits &= !(0b11 << shift);let shift = 12 * 2;
        bits &= !(0b11 << shift);let shift = 13 * 2;
        bits &= !(0b11 << shift);let shift = 14 * 2;
        bits &= !(0b11 << shift);let shift = 15 * 2;
        bits &= !(0b11 << shift);let shift = 2 * 2;
        bits &= !(0b11 << shift);let shift = 5 * 2;
        bits &= !(0b11 << shift);let shift = 6 * 2;
        bits &= !(0b11 << shift);w.bits(bits)
    });
    dp.GPIOB.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOB.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (0 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (10 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (11 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (12 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (13 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (14 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (15 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (5 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (6 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;w.bits(bits)
    });

    // GPIOC
    dp.GPIOC.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOC.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 0);bits &= !(1 << 1);bits &= !(1 << 10);bits &= !(1 << 11);bits &= !(1 << 12);bits &= !(1 << 13);bits &= !(1 << 2);bits &= !(1 << 2);bits &= !(1 << 3);bits &= !(1 << 3);bits &= !(1 << 4);bits &= !(1 << 5);bits &= !(1 << 8);bits &= !(1 << 9);w.bits(bits)
    });
    dp.GPIOC.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);let shift = 1 * 2;
        bits &= !(0b11 << shift);let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);let shift = 4 * 2;
        bits &= !(0b11 << shift);let shift = 5 * 2;
        bits &= !(0b11 << shift);let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;w.bits(bits)
    });
    dp.GPIOC.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOC.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (0 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (10 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (11 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (12 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (13 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (3 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (3 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (4 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (5 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (8 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (9 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;w.bits(bits)
    });

    // GPIOD
    dp.GPIOD.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b01 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b01 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOD.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 0);bits &= !(1 << 1);bits &= !(1 << 10);bits &= !(1 << 11);bits &= !(1 << 12);bits |= 1 << 12;bits &= !(1 << 13);bits |= 1 << 13;bits &= !(1 << 14);bits &= !(1 << 15);bits &= !(1 << 2);bits &= !(1 << 7);bits &= !(1 << 8);bits &= !(1 << 9);w.bits(bits)
    });
    dp.GPIOD.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);let shift = 1 * 2;
        bits &= !(0b11 << shift);let shift = 10 * 2;
        bits &= !(0b11 << shift);let shift = 11 * 2;
        bits &= !(0b11 << shift);let shift = 12 * 2;
        bits &= !(0b11 << shift);let shift = 13 * 2;
        bits &= !(0b11 << shift);let shift = 14 * 2;
        bits &= !(0b11 << shift);let shift = 15 * 2;
        bits &= !(0b11 << shift);let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);let shift = 8 * 2;
        bits &= !(0b11 << shift);let shift = 9 * 2;
        bits &= !(0b11 << shift);w.bits(bits)
    });
    dp.GPIOD.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOD.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (0 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (10 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (11 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (12 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (4u32 & 0xF) << afr_shift;let afr_shift = (13 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (4u32 & 0xF) << afr_shift;let afr_shift = (14 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (15 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (7 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (8 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (9 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;w.bits(bits)
    });

    // GPIOE
    dp.GPIOE.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOE.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 0);bits &= !(1 << 1);bits &= !(1 << 10);bits &= !(1 << 11);bits &= !(1 << 12);bits &= !(1 << 13);bits &= !(1 << 14);bits &= !(1 << 15);bits &= !(1 << 3);bits &= !(1 << 4);bits &= !(1 << 5);bits &= !(1 << 6);bits &= !(1 << 7);bits &= !(1 << 8);bits &= !(1 << 9);w.bits(bits)
    });
    dp.GPIOE.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);let shift = 1 * 2;
        bits &= !(0b11 << shift);let shift = 10 * 2;
        bits &= !(0b11 << shift);let shift = 11 * 2;
        bits &= !(0b11 << shift);let shift = 12 * 2;
        bits &= !(0b11 << shift);let shift = 13 * 2;
        bits &= !(0b11 << shift);let shift = 14 * 2;
        bits &= !(0b11 << shift);let shift = 15 * 2;
        bits &= !(0b11 << shift);let shift = 3 * 2;
        bits &= !(0b11 << shift);let shift = 4 * 2;
        bits &= !(0b11 << shift);let shift = 5 * 2;
        bits &= !(0b11 << shift);let shift = 6 * 2;
        bits &= !(0b11 << shift);let shift = 7 * 2;
        bits &= !(0b11 << shift);let shift = 8 * 2;
        bits &= !(0b11 << shift);let shift = 9 * 2;
        bits &= !(0b11 << shift);w.bits(bits)
    });
    dp.GPIOE.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOE.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (0 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (10 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (11 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (12 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (13 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (14 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (15 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (3 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (4 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (5 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (6 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (7 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (8 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (9 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;w.bits(bits)
    });

    // GPIOF
    dp.GPIOF.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOF.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 0);bits &= !(1 << 1);bits &= !(1 << 10);bits &= !(1 << 11);bits &= !(1 << 12);bits &= !(1 << 13);bits &= !(1 << 14);bits &= !(1 << 15);bits &= !(1 << 2);bits &= !(1 << 3);bits &= !(1 << 4);bits &= !(1 << 5);bits &= !(1 << 6);bits &= !(1 << 7);bits &= !(1 << 8);bits &= !(1 << 9);w.bits(bits)
    });
    dp.GPIOF.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);let shift = 1 * 2;
        bits &= !(0b11 << shift);let shift = 10 * 2;
        bits &= !(0b11 << shift);let shift = 11 * 2;
        bits &= !(0b11 << shift);let shift = 12 * 2;
        bits &= !(0b11 << shift);let shift = 13 * 2;
        bits &= !(0b11 << shift);let shift = 14 * 2;
        bits &= !(0b11 << shift);let shift = 15 * 2;
        bits &= !(0b11 << shift);let shift = 2 * 2;
        bits &= !(0b11 << shift);let shift = 3 * 2;
        bits &= !(0b11 << shift);let shift = 4 * 2;
        bits &= !(0b11 << shift);let shift = 5 * 2;
        bits &= !(0b11 << shift);let shift = 6 * 2;
        bits &= !(0b11 << shift);let shift = 7 * 2;
        bits &= !(0b11 << shift);let shift = 8 * 2;
        bits &= !(0b11 << shift);let shift = 9 * 2;
        bits &= !(0b11 << shift);w.bits(bits)
    });
    dp.GPIOF.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOF.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (0 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (10 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (11 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (12 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (13 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (14 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (15 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (3 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (4 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (5 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (6 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (7 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (8 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (9 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;w.bits(bits)
    });

    // GPIOG
    dp.GPIOG.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOG.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 0);bits &= !(1 << 1);bits &= !(1 << 11);bits &= !(1 << 12);bits &= !(1 << 13);bits &= !(1 << 14);bits &= !(1 << 15);bits &= !(1 << 2);bits &= !(1 << 3);bits &= !(1 << 4);bits &= !(1 << 6);bits &= !(1 << 7);bits &= !(1 << 8);bits &= !(1 << 9);w.bits(bits)
    });
    dp.GPIOG.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);let shift = 1 * 2;
        bits &= !(0b11 << shift);let shift = 11 * 2;
        bits &= !(0b11 << shift);let shift = 12 * 2;
        bits &= !(0b11 << shift);let shift = 13 * 2;
        bits &= !(0b11 << shift);let shift = 14 * 2;
        bits &= !(0b11 << shift);let shift = 15 * 2;
        bits &= !(0b11 << shift);let shift = 2 * 2;
        bits &= !(0b11 << shift);let shift = 3 * 2;
        bits &= !(0b11 << shift);let shift = 4 * 2;
        bits &= !(0b11 << shift);let shift = 6 * 2;
        bits &= !(0b11 << shift);let shift = 7 * 2;
        bits &= !(0b11 << shift);let shift = 8 * 2;
        bits &= !(0b11 << shift);let shift = 9 * 2;
        bits &= !(0b11 << shift);w.bits(bits)
    });
    dp.GPIOG.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOG.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (0 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (11 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (12 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (13 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (14 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (15 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (3 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (4 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (6 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (7 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (8 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (9 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b01 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;w.bits(bits)
    });

    // GPIOH
    dp.GPIOH.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOH.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 10);bits &= !(1 << 11);bits &= !(1 << 12);bits &= !(1 << 13);bits &= !(1 << 14);bits &= !(1 << 15);bits &= !(1 << 2);bits &= !(1 << 3);bits &= !(1 << 4);bits &= !(1 << 5);bits &= !(1 << 6);bits &= !(1 << 7);bits &= !(1 << 8);bits &= !(1 << 9);w.bits(bits)
    });
    dp.GPIOH.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 10 * 2;
        bits &= !(0b11 << shift);let shift = 11 * 2;
        bits &= !(0b11 << shift);let shift = 12 * 2;
        bits &= !(0b11 << shift);let shift = 13 * 2;
        bits &= !(0b11 << shift);let shift = 14 * 2;
        bits &= !(0b11 << shift);let shift = 15 * 2;
        bits &= !(0b11 << shift);let shift = 2 * 2;
        bits &= !(0b11 << shift);let shift = 3 * 2;
        bits &= !(0b11 << shift);let shift = 4 * 2;
        bits &= !(0b11 << shift);let shift = 5 * 2;
        bits &= !(0b11 << shift);let shift = 6 * 2;
        bits &= !(0b11 << shift);let shift = 7 * 2;
        bits &= !(0b11 << shift);let shift = 8 * 2;
        bits &= !(0b11 << shift);let shift = 9 * 2;
        bits &= !(0b11 << shift);w.bits(bits)
    });
    dp.GPIOH.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOH.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (10 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (11 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (12 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (13 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (14 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (15 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (3 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (4 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (5 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (6 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (7 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (8 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (9 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;w.bits(bits)
    });

    // GPIOI
    dp.GPIOI.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOI.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 0);bits &= !(1 << 1);bits &= !(1 << 10);bits &= !(1 << 11);bits &= !(1 << 12);bits &= !(1 << 13);bits &= !(1 << 14);bits &= !(1 << 15);bits &= !(1 << 2);bits &= !(1 << 3);bits &= !(1 << 4);bits &= !(1 << 5);bits &= !(1 << 6);bits &= !(1 << 7);bits &= !(1 << 8);bits &= !(1 << 9);w.bits(bits)
    });
    dp.GPIOI.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);let shift = 1 * 2;
        bits &= !(0b11 << shift);let shift = 10 * 2;
        bits &= !(0b11 << shift);let shift = 11 * 2;
        bits &= !(0b11 << shift);let shift = 12 * 2;
        bits &= !(0b11 << shift);let shift = 13 * 2;
        bits &= !(0b11 << shift);let shift = 14 * 2;
        bits &= !(0b11 << shift);let shift = 15 * 2;
        bits &= !(0b11 << shift);let shift = 2 * 2;
        bits &= !(0b11 << shift);let shift = 3 * 2;
        bits &= !(0b11 << shift);let shift = 4 * 2;
        bits &= !(0b11 << shift);let shift = 5 * 2;
        bits &= !(0b11 << shift);let shift = 6 * 2;
        bits &= !(0b11 << shift);let shift = 7 * 2;
        bits &= !(0b11 << shift);let shift = 8 * 2;
        bits &= !(0b11 << shift);let shift = 9 * 2;
        bits &= !(0b11 << shift);w.bits(bits)
    });
    dp.GPIOI.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOI.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (0 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (10 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (11 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (12 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (13 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (14 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (15 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (3 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (4 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (5 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (6 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (7 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (8 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (9 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b01 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b01 << shift;let shift = 14 * 2;
        bits &= !(0b11 << shift);bits |= 0b01 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b01 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;w.bits(bits)
    });

    // GPIOJ
    dp.GPIOJ.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOJ.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 0);bits &= !(1 << 1);bits &= !(1 << 10);bits &= !(1 << 11);bits &= !(1 << 12);bits &= !(1 << 13);bits &= !(1 << 15);bits &= !(1 << 2);bits &= !(1 << 3);bits &= !(1 << 4);bits &= !(1 << 5);bits &= !(1 << 6);bits &= !(1 << 7);bits &= !(1 << 8);bits &= !(1 << 9);w.bits(bits)
    });
    dp.GPIOJ.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);let shift = 1 * 2;
        bits &= !(0b11 << shift);let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);let shift = 13 * 2;
        bits &= !(0b11 << shift);let shift = 15 * 2;
        bits &= !(0b11 << shift);let shift = 2 * 2;
        bits &= !(0b11 << shift);let shift = 3 * 2;
        bits &= !(0b11 << shift);let shift = 4 * 2;
        bits &= !(0b11 << shift);let shift = 5 * 2;
        bits &= !(0b11 << shift);let shift = 6 * 2;
        bits &= !(0b11 << shift);let shift = 7 * 2;
        bits &= !(0b11 << shift);let shift = 8 * 2;
        bits &= !(0b11 << shift);let shift = 9 * 2;
        bits &= !(0b11 << shift);w.bits(bits)
    });
    dp.GPIOJ.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOJ.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (0 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (10 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (11 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (12 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (13 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (15 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (3 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (4 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (5 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (6 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (3u32 & 0xF) << afr_shift;let afr_shift = (7 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (3u32 & 0xF) << afr_shift;let afr_shift = (8 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (9 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 10 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 11 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 12 * 2;
        bits &= !(0b11 << shift);bits |= 0b01 << shift;let shift = 13 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 15 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 8 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 9 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;w.bits(bits)
    });

    // GPIOK
    dp.GPIOK.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });
    dp.GPIOK.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();bits &= !(1 << 0);bits &= !(1 << 1);bits &= !(1 << 2);bits &= !(1 << 3);bits &= !(1 << 4);bits &= !(1 << 5);bits &= !(1 << 6);bits &= !(1 << 7);w.bits(bits)
    });
    dp.GPIOK.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b11 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);let shift = 3 * 2;
        bits &= !(0b11 << shift);let shift = 4 * 2;
        bits &= !(0b11 << shift);let shift = 5 * 2;
        bits &= !(0b11 << shift);let shift = 6 * 2;
        bits &= !(0b11 << shift);let shift = 7 * 2;
        bits &= !(0b11 << shift);w.bits(bits)
    });
    dp.GPIOK.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();w.bits(bits)
    });
    dp.GPIOK.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();let afr_shift = (0 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (1 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (2 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (3 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (4 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (5 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (6 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;let afr_shift = (7 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;w.bits(bits)
    });
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();let shift = 0 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 1 * 2;
        bits &= !(0b11 << shift);bits |= 0b10 << shift;let shift = 2 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 3 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 4 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 5 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 6 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;let shift = 7 * 2;
        bits &= !(0b11 << shift);bits |= 0b00 << shift;w.bits(bits)
    });


}



/// Disables unused peripherals and masks their interrupts.


/// Enables peripheral clocks for the generated board using PAC registers.

pub fn enable_peripherals(_dp: &pac::Peripherals) {

}



/// De-initializes board pins to their analog state.


/// De-initializes board peripherals and clocks using PAC registers.

pub fn deinit_board_pac(dp: &pac::Peripherals) {
    // Return pins to analog and remove pulls/open-drain
    let shift = 0 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 1 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 2 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 5 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 7 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 5 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 0 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 2 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 2 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 3 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 8 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 7 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOD.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOD.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOD.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 3 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOE.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOE.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOE.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOF.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOF.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOF.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 11 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 6 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOG.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOG.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOG.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 10 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOH.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOH.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOH.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 14 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 14)) });
    let shift = 15 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOI.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOI.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOI.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 10 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 10)) });
    let shift = 11 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 11)) });
    let shift = 12 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 12)) });
    let shift = 13 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 13)) });
    let shift = 15 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 15)) });
    let shift = 2 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });
    let shift = 8 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });
    let shift = 9 * 2;
    dp.GPIOJ.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOJ.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOJ.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 9)) });
    let shift = 0 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 2 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 2)) });
    let shift = 3 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 3)) });
    let shift = 4 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });
    let shift = 6 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOK.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOK.pupdr.modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOK.otyper.modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });

    // Gate peripheral clocks

    // Disable DMA controllers and mask their interrupts

    // Disable interrupts
    unsafe { pac::NVIC::mask(pac::Interrupt::I2C4_EV); }
    unsafe { pac::NVIC::mask(pac::Interrupt::I2C4_ER); }
    unsafe { pac::NVIC::mask(pac::Interrupt::SPI2); }
    unsafe { pac::NVIC::mask(pac::Interrupt::SPI5); }
    unsafe { pac::NVIC::mask(pac::Interrupt::UART8); }
    unsafe { pac::NVIC::mask(pac::Interrupt::USART1); }
}




/// Initializes the board using PAC register access.


/// Initializes the board using PAC register access.

pub fn init_board_pac(dp: pac::Peripherals) {
    enable_gpio_clocks(&dp);
    configure_pins_pac(&dp);
    enable_peripherals(&dp);
}




/// Label-to-pin mapping constants derived from GPIO_Label entries.
#[allow(dead_code)]
pub struct PinLabel { pub pin: &'static str, pub func: &'static str, pub af: u8 }

/// Constants for user labels to ease discovery and mapping.
pub mod pins {
    use super::PinLabel;
  
    pub const ARD_A2: PinLabel = PinLabel { pin: "PA0", func: "ADCx_INP0", af: 0 };
    
    pub const ARD_A3_2: PinLabel = PinLabel { pin: "PA1", func: "ETH_REF_CLK", af: 0 };
    
    pub const STLINK_TX: PinLabel = PinLabel { pin: "PA10", func: "USART1_RX", af: 0 };
    
    pub const PMOD_1: PinLabel = PinLabel { pin: "PA11", func: "SPI2_NSS", af: 0 };
    
    pub const SPI2_SCK: PinLabel = PinLabel { pin: "PA12", func: "SPI2_SCK", af: 0 };
    
    pub const ARD_A3_2: PinLabel = PinLabel { pin: "PA1", func: "ADCx_INP1", af: 0 };
    
    pub const ETH_MDIO: PinLabel = PinLabel { pin: "PA2", func: "ETH_MDIO", af: 0 };
    
    pub const ULPI_D0: PinLabel = PinLabel { pin: "PA3", func: "USB_OTG_HS_ULPI_D0", af: 0 };
    
    pub const ULPI_CK: PinLabel = PinLabel { pin: "PA5", func: "USB_OTG_HS_ULPI_CK", af: 0 };
    
    pub const ETH_CRS_DV: PinLabel = PinLabel { pin: "PA7", func: "ETH_CRS_DV", af: 0 };
    
    pub const CEC_CK_MCO1: PinLabel = PinLabel { pin: "PA8", func: "RCC_MCO_1", af: 0 };
    
    pub const STLINK_RX: PinLabel = PinLabel { pin: "PA9", func: "USART1_TX", af: 0 };
    
    pub const ULPI_D1: PinLabel = PinLabel { pin: "PB0", func: "USB_OTG_HS_ULPI_D1", af: 0 };
    
    pub const ULPI_D2: PinLabel = PinLabel { pin: "PB1", func: "USB_OTG_HS_ULPI_D2", af: 0 };
    
    pub const ULPI_D3: PinLabel = PinLabel { pin: "PB10", func: "USB_OTG_HS_ULPI_D3", af: 0 };
    
    pub const ULPI_D4: PinLabel = PinLabel { pin: "PB11", func: "USB_OTG_HS_ULPI_D4", af: 0 };
    
    pub const ULPI_D5: PinLabel = PinLabel { pin: "PB12", func: "USB_OTG_HS_ULPI_D5", af: 0 };
    
    pub const ULPI_D6: PinLabel = PinLabel { pin: "PB13", func: "USB_OTG_HS_ULPI_D6", af: 0 };
    
    pub const PMOD_9: PinLabel = PinLabel { pin: "PB14", func: "GPIO_Input", af: 0 };
    
    pub const PMOD_8: PinLabel = PinLabel { pin: "PB15", func: "GPIO_Input", af: 0 };
    
    pub const QSPI_CLK: PinLabel = PinLabel { pin: "PB2", func: "QUADSPI_CLK", af: 0 };
    
    pub const ULPI_D7: PinLabel = PinLabel { pin: "PB5", func: "USB_OTG_HS_ULPI_D7", af: 0 };
    
    pub const HDMI_CEC: PinLabel = PinLabel { pin: "PB6", func: "CEC", af: 0 };
    
    pub const ULPI_STP: PinLabel = PinLabel { pin: "PC0", func: "USB_OTG_HS_ULPI_STP", af: 0 };
    
    pub const ETH_MDC_SAI4_D1: PinLabel = PinLabel { pin: "PC1", func: "ETH_MDC", af: 0 };
    
    pub const SDIO1_D2: PinLabel = PinLabel { pin: "PC10", func: "SDMMC1_D2", af: 0 };
    
    pub const SDIO1_D3: PinLabel = PinLabel { pin: "PC11", func: "SDMMC1_D3", af: 0 };
    
    pub const SDIO1_CK: PinLabel = PinLabel { pin: "PC12", func: "SDMMC1_CK", af: 0 };
    
    pub const B2_WAKEUP_BUTTON: PinLabel = PinLabel { pin: "PC13", func: "RTC_TAMP1", af: 0 };
    
    pub const ARD_A4_2: PinLabel = PinLabel { pin: "PC2", func: "SPI2_MISO", af: 0 };
    
    pub const ARD_A4_2: PinLabel = PinLabel { pin: "PC2", func: "ADC3_INP0", af: 0 };
    
    pub const ARD_A5_2: PinLabel = PinLabel { pin: "PC3", func: "SPI2_MOSI", af: 0 };
    
    pub const ARD_A5_2: PinLabel = PinLabel { pin: "PC3", func: "ADC3_INP1", af: 0 };
    
    pub const ETH_RXD0: PinLabel = PinLabel { pin: "PC4", func: "ETH_RXD0", af: 0 };
    
    pub const ETH_RXD1: PinLabel = PinLabel { pin: "PC5", func: "ETH_RXD1", af: 0 };
    
    pub const SDIO1_D0: PinLabel = PinLabel { pin: "PC8", func: "SDMMC1_D0", af: 0 };
    
    pub const SDIO1_D1: PinLabel = PinLabel { pin: "PC9", func: "SDMMC1_D1", af: 0 };
    
    pub const FMC_D2: PinLabel = PinLabel { pin: "PD0", func: "FMC_D2_DA2", af: 0 };
    
    pub const FMC_D3: PinLabel = PinLabel { pin: "PD1", func: "FMC_D3_DA3", af: 0 };
    
    pub const FMC_D15: PinLabel = PinLabel { pin: "PD10", func: "FMC_D15_DA15", af: 0 };
    
    pub const QSPI_BK1_IO0: PinLabel = PinLabel { pin: "PD11", func: "QUADSPI_BK1_IO0", af: 0 };
    
    pub const FMC_D0: PinLabel = PinLabel { pin: "PD14", func: "FMC_D0_DA0", af: 0 };
    
    pub const FMC_D1: PinLabel = PinLabel { pin: "PD15", func: "FMC_D1_DA1", af: 0 };
    
    pub const SDIO1_CMD: PinLabel = PinLabel { pin: "PD2", func: "SDMMC1_CMD", af: 0 };
    
    pub const SPDIF_RX0: PinLabel = PinLabel { pin: "PD7", func: "SPDIFRX1_IN0", af: 0 };
    
    pub const FMC_D13: PinLabel = PinLabel { pin: "PD8", func: "FMC_D13_DA13", af: 0 };
    
    pub const FMC_D14: PinLabel = PinLabel { pin: "PD9", func: "FMC_D14_DA14", af: 0 };
    
    pub const FMC_NBL0: PinLabel = PinLabel { pin: "PE0", func: "FMC_NBL0", af: 0 };
    
    pub const FMC_NBL1: PinLabel = PinLabel { pin: "PE1", func: "FMC_NBL1", af: 0 };
    
    pub const FMC_D7: PinLabel = PinLabel { pin: "PE10", func: "FMC_D7_DA7", af: 0 };
    
    pub const FMC_D8: PinLabel = PinLabel { pin: "PE11", func: "FMC_D8_DA8", af: 0 };
    
    pub const FMC_D9: PinLabel = PinLabel { pin: "PE12", func: "FMC_D9_DA9", af: 0 };
    
    pub const FMC_D10: PinLabel = PinLabel { pin: "PE13", func: "FMC_D10_DA10", af: 0 };
    
    pub const FMC_D11: PinLabel = PinLabel { pin: "PE14", func: "FMC_D11_DA11", af: 0 };
    
    pub const FMC_D12: PinLabel = PinLabel { pin: "PE15", func: "FMC_D12_DA12", af: 0 };
    
    pub const SAI1_SD_B: PinLabel = PinLabel { pin: "PE3", func: "SAI1_SD_B", af: 0 };
    
    pub const SAI1_FS_A: PinLabel = PinLabel { pin: "PE4", func: "SAI1_FS_A", af: 0 };
    
    pub const SAI1_SCK_A: PinLabel = PinLabel { pin: "PE5", func: "SAI1_SCK_A", af: 0 };
    
    pub const SAI1_SD_A: PinLabel = PinLabel { pin: "PE6", func: "SAI1_SD_A", af: 0 };
    
    pub const FMC_D4: PinLabel = PinLabel { pin: "PE7", func: "FMC_D4_DA4", af: 0 };
    
    pub const FMC_D5: PinLabel = PinLabel { pin: "PE8", func: "FMC_D5_DA5", af: 0 };
    
    pub const FMC_D6: PinLabel = PinLabel { pin: "PE9", func: "FMC_D6_DA6", af: 0 };
    
    pub const FMC_A0: PinLabel = PinLabel { pin: "PF0", func: "FMC_A0", af: 0 };
    
    pub const FMC_A1: PinLabel = PinLabel { pin: "PF1", func: "FMC_A1", af: 0 };
    
    pub const ARD_A1: PinLabel = PinLabel { pin: "PF10", func: "ADC3_INP6", af: 0 };
    
    pub const FMC_SDRAS: PinLabel = PinLabel { pin: "PF11", func: "FMC_SDNRAS", af: 0 };
    
    pub const FMC_A6: PinLabel = PinLabel { pin: "PF12", func: "FMC_A6", af: 0 };
    
    pub const FMC_A7: PinLabel = PinLabel { pin: "PF13", func: "FMC_A7", af: 0 };
    
    pub const FMC_A8: PinLabel = PinLabel { pin: "PF14", func: "FMC_A8", af: 0 };
    
    pub const FMC_A9: PinLabel = PinLabel { pin: "PF15", func: "FMC_A9", af: 0 };
    
    pub const FMC_A2: PinLabel = PinLabel { pin: "PF2", func: "FMC_A2", af: 0 };
    
    pub const FMC_A3: PinLabel = PinLabel { pin: "PF3", func: "FMC_A3", af: 0 };
    
    pub const FMC_A4: PinLabel = PinLabel { pin: "PF4", func: "FMC_A4", af: 0 };
    
    pub const FMC_A5: PinLabel = PinLabel { pin: "PF5", func: "FMC_A5", af: 0 };
    
    pub const QSPI_BK1_IO3: PinLabel = PinLabel { pin: "PF6", func: "QUADSPI_BK1_IO3", af: 0 };
    
    pub const QSPI_BK1_IO2: PinLabel = PinLabel { pin: "PF7", func: "QUADSPI_BK1_IO2", af: 0 };
    
    pub const PMOD_14_ARD_D3: PinLabel = PinLabel { pin: "PF8", func: "S_TIM13_CH1", af: 0 };
    
    pub const QSPI_BK1_IO1: PinLabel = PinLabel { pin: "PF9", func: "QUADSPI_BK1_IO1", af: 0 };
    
    pub const FMC_A10: PinLabel = PinLabel { pin: "PG0", func: "FMC_A10", af: 0 };
    
    pub const FMC_A11: PinLabel = PinLabel { pin: "PG1", func: "FMC_A11", af: 0 };
    
    pub const ETH_TX_EN: PinLabel = PinLabel { pin: "PG11", func: "ETH_TX_EN", af: 0 };
    
    pub const ETH_TXD1: PinLabel = PinLabel { pin: "PG12", func: "ETH_TXD1", af: 0 };
    
    pub const ETH_TXD0: PinLabel = PinLabel { pin: "PG13", func: "ETH_TXD0", af: 0 };
    
    pub const QSPI_BK2_IO3: PinLabel = PinLabel { pin: "PG14", func: "QUADSPI_BK2_IO3", af: 0 };
    
    pub const FMC_SDCAS: PinLabel = PinLabel { pin: "PG15", func: "FMC_SDNCAS", af: 0 };
    
    pub const FMC_A12: PinLabel = PinLabel { pin: "PG2", func: "FMC_A12", af: 0 };
    
    pub const DSI_RESET: PinLabel = PinLabel { pin: "PG3", func: "GPIO_Output", af: 0 };
    
    pub const FMC_BA0: PinLabel = PinLabel { pin: "PG4", func: "FMC_A14_BA0", af: 0 };
    
    pub const QSPI_BK1_NCS: PinLabel = PinLabel { pin: "PG6", func: "QUADSPI_BK1_NCS", af: 0 };
    
    pub const SAI1_MCLK_A: PinLabel = PinLabel { pin: "PG7", func: "SAI1_MCLK_A", af: 0 };
    
    pub const FMC_SDCLK: PinLabel = PinLabel { pin: "PG8", func: "FMC_SDCLK", af: 0 };
    
    pub const QSPI_BK2_IO2: PinLabel = PinLabel { pin: "PG9", func: "QUADSPI_BK2_IO2", af: 0 };
    
    pub const FMC_D18: PinLabel = PinLabel { pin: "PH10", func: "FMC_D18", af: 0 };
    
    pub const FMC_D19: PinLabel = PinLabel { pin: "PH11", func: "FMC_D19", af: 0 };
    
    pub const FMC_D20: PinLabel = PinLabel { pin: "PH12", func: "FMC_D20", af: 0 };
    
    pub const FMC_D21: PinLabel = PinLabel { pin: "PH13", func: "FMC_D21", af: 0 };
    
    pub const FMC_D22: PinLabel = PinLabel { pin: "PH14", func: "FMC_D22", af: 0 };
    
    pub const FMC_D23: PinLabel = PinLabel { pin: "PH15", func: "FMC_D23", af: 0 };
    
    pub const QSPI_BK2_IO0: PinLabel = PinLabel { pin: "PH2", func: "QUADSPI_BK2_IO0", af: 0 };
    
    pub const QSPI_BK2_IO1: PinLabel = PinLabel { pin: "PH3", func: "QUADSPI_BK2_IO1", af: 0 };
    
    pub const ULPI_NXT: PinLabel = PinLabel { pin: "PH4", func: "USB_OTG_HS_ULPI_NXT", af: 0 };
    
    pub const FMC_SDNWE: PinLabel = PinLabel { pin: "PH5", func: "FMC_SDNWE", af: 0 };
    
    pub const FMC_SDNE1: PinLabel = PinLabel { pin: "PH6", func: "FMC_SDNE1", af: 0 };
    
    pub const FMC_SDCKE1: PinLabel = PinLabel { pin: "PH7", func: "FMC_SDCKE1", af: 0 };
    
    pub const FMC_D16: PinLabel = PinLabel { pin: "PH8", func: "FMC_D16", af: 0 };
    
    pub const FMC_D17: PinLabel = PinLabel { pin: "PH9", func: "FMC_D17", af: 0 };
    
    pub const FMC_D24: PinLabel = PinLabel { pin: "PI0", func: "FMC_D24", af: 0 };
    
    pub const FMC_D25: PinLabel = PinLabel { pin: "PI1", func: "FMC_D25", af: 0 };
    
    pub const FMC_D31: PinLabel = PinLabel { pin: "PI10", func: "FMC_D31", af: 0 };
    
    pub const ULPI_DIR: PinLabel = PinLabel { pin: "PI11", func: "USB_OTG_HS_ULPI_DIR", af: 0 };
    
    pub const LED1: PinLabel = PinLabel { pin: "PI12", func: "GPIO_Output", af: 0 };
    
    pub const LED2: PinLabel = PinLabel { pin: "PI13", func: "GPIO_Output", af: 0 };
    
    pub const LED3: PinLabel = PinLabel { pin: "PI14", func: "GPIO_Output", af: 0 };
    
    pub const LED4: PinLabel = PinLabel { pin: "PI15", func: "GPIO_Output", af: 0 };
    
    pub const FMC_D26: PinLabel = PinLabel { pin: "PI2", func: "FMC_D26", af: 0 };
    
    pub const FMC_D27: PinLabel = PinLabel { pin: "PI3", func: "FMC_D27", af: 0 };
    
    pub const FMC_NBL2: PinLabel = PinLabel { pin: "PI4", func: "FMC_NBL2", af: 0 };
    
    pub const FMC_NBL3: PinLabel = PinLabel { pin: "PI5", func: "FMC_NBL3", af: 0 };
    
    pub const FMC_D28: PinLabel = PinLabel { pin: "PI6", func: "FMC_D28", af: 0 };
    
    pub const FMC_D29: PinLabel = PinLabel { pin: "PI7", func: "FMC_D29", af: 0 };
    
    pub const USD_DETECT: PinLabel = PinLabel { pin: "PI8", func: "GPIO_Input", af: 0 };
    
    pub const FMC_D30: PinLabel = PinLabel { pin: "PI9", func: "FMC_D30", af: 0 };
    
    pub const ARD_D7: PinLabel = PinLabel { pin: "PJ0", func: "GPIO_Input", af: 0 };
    
    pub const OTG_HS_OVERCURRENT: PinLabel = PinLabel { pin: "PJ1", func: "GPIO_Input", af: 0 };
    
    pub const ARD_D11: PinLabel = PinLabel { pin: "PJ10", func: "SPI5_MOSI", af: 0 };
    
    pub const ARD_D12: PinLabel = PinLabel { pin: "PJ11", func: "SPI5_MISO", af: 0 };
    
    pub const BL_CTRL: PinLabel = PinLabel { pin: "PJ12", func: "GPIO_Output", af: 0 };
    
    pub const PMOD_12: PinLabel = PinLabel { pin: "PJ13", func: "GPIO_Input", af: 0 };
    
    pub const AUDIO_INT: PinLabel = PinLabel { pin: "PJ15", func: "GPIO_Input", af: 0 };
    
    pub const DSI_TE: PinLabel = PinLabel { pin: "PJ2", func: "DSIHOST_TE", af: 0 };
    
    pub const ARD_D2: PinLabel = PinLabel { pin: "PJ3", func: "GPIO_Input", af: 0 };
    
    pub const ARD_D4: PinLabel = PinLabel { pin: "PJ4", func: "GPIO_Input", af: 0 };
    
    pub const ARD_D8: PinLabel = PinLabel { pin: "PJ5", func: "GPIO_Input", af: 0 };
    
    pub const ARD_D9: PinLabel = PinLabel { pin: "PJ6", func: "S_TIM8_CH2", af: 3 };
    
    pub const ARD_D6: PinLabel = PinLabel { pin: "PJ7", func: "TIM8_CH2N", af: 3 };
    
    pub const ARD_D1: PinLabel = PinLabel { pin: "PJ8", func: "UART8_TX", af: 0 };
    
    pub const ARD_D0: PinLabel = PinLabel { pin: "PJ9", func: "UART8_RX", af: 0 };
    
    pub const ARD_D13: PinLabel = PinLabel { pin: "PK0", func: "SPI5_SCK", af: 0 };
    
    pub const ARD_D10: PinLabel = PinLabel { pin: "PK1", func: "SPI5_NSS", af: 0 };
    
    pub const JOY_SEL: PinLabel = PinLabel { pin: "PK2", func: "GPIO_Input", af: 0 };
    
    pub const JOY_DOWN: PinLabel = PinLabel { pin: "PK3", func: "GPIO_Input", af: 0 };
    
    pub const JOY_LEFT: PinLabel = PinLabel { pin: "PK4", func: "GPIO_Input", af: 0 };
    
    pub const JOY_RIGHT: PinLabel = PinLabel { pin: "PK5", func: "GPIO_Input", af: 0 };
    
    pub const JOY_UP: PinLabel = PinLabel { pin: "PK6", func: "GPIO_Input", af: 0 };
    
    pub const TOUCH_INT: PinLabel = PinLabel { pin: "PK7", func: "GPIO_Input", af: 0 };
    
}
