/* Auto-generated by rlvgl-creator
* SPDX-FileCopyrightText: 2020 STMicroelectronics
* SPDX-FileCopyrightText: 2025 Softoboros Technology, Inc.
* SPDX-License-Identifier: BSD-3-Clause
* Provenance: STM32_open_pin_data (commit <hash>), build <build-hash>.

*/

//! HAL BSP for the generated board.

#![allow(non_snake_case)]
#![allow(clippy::too_many_arguments)]
#![cfg(feature = "spi3")]
use stm32h7xx_hal::{gpio::Speed, pac, prelude::*};

/// Enables GPIO clocks required by the generated board.

pub fn enable_gpio_clocks(dp: &pac::Peripherals) {}
/// Configures pins using the HAL API.
pub fn configure_pins_hal(dp: &pac::Peripherals) {
    // PA0 SPI3_SCK AF0
    let pa0 = gpioa.pa0.into_alternate::<0>().set_speed(Speed::VeryHigh);
    // PA1 SPI3_MISO AF0
    let pa1 = gpioa.pa1.into_alternate::<0>().set_speed(Speed::VeryHigh);
    // PB8 SPI3_MOSI AF0
    let pb8 = gpiob.pb8.into_alternate::<0>().set_speed(Speed::VeryHigh);
}

/// Enables peripheral clocks for the generated board.

pub fn enable_peripherals(dp: &pac::Peripherals) {}

/// De-initializes board peripherals and clocks.

pub fn deinit_board_hal(dp: &pac::Peripherals) {
    // Return pins to analog and remove pulls/open-drain
    let shift = 0 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA
        .pupdr
        .modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA
        .otyper
        .modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 0)) });
    let shift = 1 * 2;
    dp.GPIOA.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOA
        .pupdr
        .modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOA
        .otyper
        .modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 1)) });
    let shift = 8 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB
        .pupdr
        .modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB
        .otyper
        .modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 8)) });

    // Gate peripheral clocks

    // Disable DMA controllers and mask their interrupts

    // Disable interrupts
}

/// Initializes the board using HAL drivers.

pub fn init_board_hal(dp: pac::Peripherals /*, clocks */) {
    enable_gpio_clocks(&dp);
    configure_pins_hal(&dp);
    enable_peripherals(&dp);
}
