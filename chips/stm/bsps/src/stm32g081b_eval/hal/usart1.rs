/* Auto-generated by rlvgl-creator
* SPDX-FileCopyrightText: 2020 STMicroelectronics
* SPDX-FileCopyrightText: 2025 Softoboros Technology, Inc.
* SPDX-License-Identifier: BSD-3-Clause
* Provenance: STM32_open_pin_data (commit <hash>), build <build-hash>.

*/

//! HAL BSP for the generated board.

#![allow(non_snake_case)]
#![allow(clippy::too_many_arguments)]
#![cfg(feature = "usart1")]

use stm32g0xx_hal::{gpio::Speed, gpioc::*, pac, prelude::*};

/// Enables GPIO clocks required by the generated board.

pub fn enable_gpio_clocks(dp: &pac::Peripherals) {
    const MASK: u32 = (1u32 << 2);
    dp.RCC
        .iopenr
        .modify(|r, w| unsafe { w.bits(r.bits() | MASK) });
}

/// Configures pins using the HAL API.

pub fn configure_pins_hal(dp: &pac::Peripherals) {
    let gpioc = dp.GPIOC.split();

    // PC4 USART1_TX AF0
    let pc4 = gpioc.pc4.into_alternate::<0>();

    // PC5 USART1_RX AF0
    let pc5 = gpioc.pc5.into_alternate::<0>();
}

/// Enables peripheral clocks for the generated board.

pub fn enable_peripherals(dp: &pac::Peripherals) {}

/// De-initializes board peripherals and clocks.

pub fn deinit_board_hal(dp: &pac::Peripherals) {
    // Return pins to analog and remove pulls/open-drain
    let shift = 4 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC
        .pupdr
        .modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC
        .otyper
        .modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 4)) });
    let shift = 5 * 2;
    dp.GPIOC.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOC
        .pupdr
        .modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOC
        .otyper
        .modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 5)) });

    // Gate peripheral clocks

    // Disable DMA controllers and mask their interrupts

    // Disable interrupts
    unsafe {
        pac::NVIC::mask(pac::Interrupt::USART1);
    }
}

/// Initializes the board using HAL drivers.

pub fn init_board_hal(dp: pac::Peripherals /*, clocks */) {
    enable_gpio_clocks(&dp);
    configure_pins_hal(&dp);
    enable_peripherals(&dp);
}
