/* Auto-generated by rlvgl-creator
* SPDX-FileCopyrightText: 2020 STMicroelectronics
* SPDX-FileCopyrightText: 2025 Softoboros Technology, Inc.
* SPDX-License-Identifier: BSD-3-Clause
* Provenance: STM32_open_pin_data (commit <hash>), build <build-hash>.

*/

//! PAC BSP for the generated board.

#![allow(non_snake_case)]
#![allow(clippy::too_many_arguments)]
#![cfg(feature = "i2c1")]

use stm32wb::stm32wb09 as pac;

/// Enables GPIO clocks required by the generated board.

pub fn enable_gpio_clocks(dp: &pac::Peripherals) {
    const MASK: u32 = (1u32 << 1);
    dp.RCC
        .ahb1enr
        .modify(|r, w| unsafe { w.bits(r.bits() | MASK) });
}

/// Configures pins using PAC registers.

pub fn configure_pins_pac(dp: &pac::Peripherals) {
    // GPIOB
    dp.GPIOB.pupdr.modify(|r, w| unsafe {
        let mut bits = r.bits();
        let shift = 6 * 2;
        bits &= !(0b11 << shift);
        bits |= 0b01 << shift;
        let shift = 7 * 2;
        bits &= !(0b11 << shift);
        bits |= 0b01 << shift;
        w.bits(bits)
    });
    dp.GPIOB.otyper.modify(|r, w| unsafe {
        let mut bits = r.bits();
        bits &= !(1 << 6);
        bits |= 1 << 6;
        bits &= !(1 << 7);
        bits |= 1 << 7;
        w.bits(bits)
    });
    dp.GPIOB.ospeedr.modify(|r, w| unsafe {
        let mut bits = r.bits();
        let shift = 6 * 2;
        bits &= !(0b11 << shift);
        let shift = 7 * 2;
        bits &= !(0b11 << shift);
        w.bits(bits)
    });
    dp.GPIOB.afrl.modify(|r, w| unsafe {
        let mut bits = r.bits();
        w.bits(bits)
    });
    dp.GPIOB.afrh.modify(|r, w| unsafe {
        let mut bits = r.bits();
        let afr_shift = (6 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;
        let afr_shift = (7 % 8) * 4;
        bits &= !(0xF << afr_shift);
        bits |= (0u32 & 0xF) << afr_shift;
        w.bits(bits)
    });
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits();
        let shift = 6 * 2;
        bits &= !(0b11 << shift);
        bits |= 0b10 << shift;
        let shift = 7 * 2;
        bits &= !(0b11 << shift);
        bits |= 0b10 << shift;
        w.bits(bits)
    });
}

/// Disables unused peripherals and masks their interrupts.

/// Enables peripheral clocks for the generated board using PAC registers.

pub fn enable_peripherals(_dp: &pac::Peripherals) {}

/// De-initializes board pins to their analog state.

/// De-initializes board peripherals and clocks using PAC registers.

pub fn deinit_board_pac(dp: &pac::Peripherals) {
    // Return pins to analog and remove pulls/open-drain
    let shift = 6 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB
        .pupdr
        .modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB
        .otyper
        .modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 6)) });
    let shift = 7 * 2;
    dp.GPIOB.moder.modify(|r, w| unsafe {
        let mut bits = r.bits() & !(0b11 << shift);
        bits |= 0b11 << shift;
        w.bits(bits)
    });
    dp.GPIOB
        .pupdr
        .modify(|r, w| unsafe { w.bits(r.bits() & !(0b11 << shift)) });
    dp.GPIOB
        .otyper
        .modify(|r, w| unsafe { w.bits(r.bits() & !(1 << 7)) });

    // Gate peripheral clocks

    // Disable DMA controllers and mask their interrupts

    // Disable interrupts
}
